# The Ticket API
# --------------

# Get one ticket by id.
# Returns a Freshdesk::Ticket object.
Freshdesk::Ticket.find(10)

# Get a list of all tickets. The Freshdesk API's default
# concept of "all" is all new, unopened tickets.
# Returns an array of Freshdesk::Ticket objects.
Freshdesk::Ticket.all

# Okay, REALLY give me ALL the tickets. I mean it. Not just new ones.
Freshdesk::Ticket.all(filter_name: 'all_tickets')

# You can use any filter provided by Freshdesk.
# http://freshdesk.com/api#view_all_ticket

# Get the second page of tickets.
# Freshdesk paginates tickets in batches of 30.
Freshdesk::Ticket.all(filter_name: 'all_tickets', page: 2)

# Get deleted tickets.
Freshdesk::Ticket.all(filter_name: 'deleted')

# Get all tickets submitted by one email address.
Freshdesk::Ticket.all(filter_name: 'all_tickets', email: 'example@gmail.com')

# Get all tickets attached to one requester ID.
Freshdesk::Ticket.all(filter_name: 'all_tickets', requester: 5002602203)

# Create a new ticket.
# Returns a Freshdesk::Ticket object.

body = { subject: 'My Important Question',
         description: 'Details of the question' }

Freshdesk::Ticket.create(body)

# Update a ticket with the fields you want to change.
changes = { subject: 'Changing my ticket subject name' }
Freshdesk::Ticket.update(10, changes)
ticket = Freshdesk::Ticket.find(10)
ticket.subject # => 'Changing my ticket subject name'

# Delete a ticket with a given ID.
# Returns a boolean true if it was successfully deleted.
Freshdesk::Ticket.destroy(10)

# Get all attributes/fields of a ticket.
# Returns an array of Freshdesk::TicketField objects.
Freshdesk::TicketField.all

# Dealing with errors
# -------------------

# When the response code isn't 2XX, or the response body indicates your authentication failed, you will get Freshdesk::Error object back and can inspect the response code and body.

# With bad authentication:
Freshdesk.configure { |c| c.api_key = 'wrong key' }
object = Freshdesk::Ticket.find(10) #=> #<Freshdesk::ResponseError: {"require_login": true}>
object.body # => "{\"require_login\":true}"
object.code # => 200

# When a record isn't found:
object = Freshdesk::Ticket.find(11230) #=> #<Freshdesk::ResponseError: {"errors":{"error":"Record Not Found"}}>
object.body # => "{\"errors\":{\"error\":\"Record Not Found\"}}"
object.code # => 404
